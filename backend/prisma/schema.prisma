// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(STAFF)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  createdTransactions StockTransaction[]
  performedStocktakes Stocktake[]
  auditLogs          AuditLog[]
  bulkImportRecords  BulkImportRecord[]
  createdSales       Sale[]           @relation("SaleCreator")
  cancelledSales     Sale[]           @relation("SaleCanceller")
  processedPayments  Payment[]
  generatedReceipts  Receipt[]
  processedRefunds   SaleRefund[]     @relation("RefundProcessor")
  approvedRefunds    SaleRefund[]     @relation("RefundApprover")
  createdPurchases   PurchaseOrder[]  @relation("PurchaseCreator")
  createdReturns     PurchaseReturn[] @relation("ReturnCreator")
  processedPurchasePayments PurchasePayment[] @relation("PurchasePaymentProcessor")
  processedCustomerPayments CustomerPayment[] @relation("CustomerPaymentProcessor")

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  imageUrl    String?  @map("image_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  products Product[]

  @@map("categories")
}

model Company {
  id         String   @id @default(uuid())
  name       String   @unique
  code       String?
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  products Product[]

  @@map("companies")
}

model Product {
  id           String    @id @default(uuid())
  name         String
  sku          String    @unique
  categoryId   String?   @map("category_id")
  companyId    String?   @map("company_id")
  uomId        String    @map("uom_id")
  reorderLevel Float     @default(0) @map("reorder_level")
  description  String?
  barcode      String?   @unique
  supplierId   String?   @map("supplier_id")
  supplierName String?   @map("supplier_name")
  costPrice    Decimal?  @map("cost_price") @db.Decimal(10, 2)
  sellingPrice Decimal?  @map("selling_price") @db.Decimal(10, 2)
  minStock     Int       @default(0) @map("min_stock")
  maxStock     Int?      @map("max_stock")
  isActive     Boolean   @default(true) @map("is_active")
  images       String[]  @default([])
  deletedAt    DateTime? @map("deleted_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  stockBalances     StockBalance[]
  stockTransactions StockTransaction[]
  stocktakes        Stocktake[]
  variants          ProductVariant[]
  saleItems         SaleItem[]
  purchaseItems     PurchaseItem[]
  returnItems       PurchaseReturnItem[]
  supplier          Supplier? @relation(fields: [supplierId], references: [id])
  uom               UOM       @relation(fields: [uomId], references: [id])
  category          Category? @relation(fields: [categoryId], references: [id])
  company           Company?  @relation(fields: [companyId], references: [id])

  @@map("products")
}

model Location {
  id        String       @id @default(uuid())
  name      String
  type      LocationType
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  stockBalances     StockBalance[]
  fromTransactions  StockTransaction[] @relation("FromLocation")
  toTransactions    StockTransaction[] @relation("ToLocation")
  stocktakes        Stocktake[]
  sales             Sale[]

  @@map("locations")
}

model StockBalance {
  id          String   @id @default(uuid())
  productId   String   @map("product_id")
  locationId  String   @map("location_id")
  quantity    Float
  lastUpdated DateTime @default(now()) @map("last_updated")

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([productId, locationId])
  @@map("stock_balances")
}

model StockTransaction {
  id             String            @id @default(uuid())
  productId      String            @map("product_id")
  fromLocationId String?           @map("from_location_id")
  toLocationId   String?           @map("to_location_id")
  saleId         String?           @map("sale_id")
  purchaseOrderId String?          @map("purchase_order_id")
  type           TransactionType
  quantity       Float
  referenceNo    String?           @map("reference_no")
  remarks        String?
  createdBy      String            @map("created_by")
  createdAt      DateTime          @default(now()) @map("created_at")

  // Relations
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  fromLocation Location? @relation("FromLocation", fields: [fromLocationId], references: [id])
  toLocation   Location? @relation("ToLocation", fields: [toLocationId], references: [id])
  sale         Sale?     @relation(fields: [saleId], references: [id])
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  creator      User      @relation(fields: [createdBy], references: [id])

  @@map("stock_transactions")
}

model Stocktake {
  id               String   @id @default(uuid())
  productId        String   @map("product_id")
  locationId       String   @map("location_id")
  countedQuantity  Float    @map("counted_quantity")
  systemQuantity   Float    @map("system_quantity")
  adjustment       Float
  performedBy      String   @map("performed_by")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  performer   User     @relation(fields: [performedBy], references: [id])

  @@map("stocktakes")
}

model AuditLog {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  entityName String     @map("entity_name")
  entityId   String     @map("entity_id")
  action     AuditAction
  oldValue   Json?      @map("old_value")
  newValue   Json?      @map("new_value")
  timestamp  DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  STAFF
}

enum LocationType {
  WAREHOUSE
  STORE
}

enum TransactionType {
  RECEIPT
  ISSUE
  TRANSFER
  ADJUSTMENT
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  UPDATE_PAYMENT
  MARK_RECEIVED
  CREATE_RETURN
}

model Supplier {
  id           String   @id @default(uuid())
  name         String
  contactPerson String? @map("contact_person")
  email        String?
  phone        String?
  address      String?
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  products Product[]
  purchaseOrders PurchaseOrder[]
  purchaseReturns PurchaseReturn[]

  @@map("suppliers")
}

model UOM {
  id          String   @id @default(uuid())
  name        String
  symbol      String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  products Product[]

  @@map("uoms")
}

model ProductVariant {
  id             String   @id @default(uuid())
  productId      String   @map("product_id")
  variantName    String   @map("variant_name")
  variantValue   String   @map("variant_value")
  sku            String   @unique
  barcode        String?  @unique
  additionalPrice Decimal? @map("additional_price") @db.Decimal(10, 2)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model BulkImportRecord {
  id               String   @id @default(uuid())
  fileName         String   @map("file_name")
  originalFileName String   @map("original_file_name")
  status           String   // 'pending', 'processing', 'completed', 'failed'
  totalRecords     Int      @map("total_records")
  successfulRecords Int     @map("successful_records")
  failedRecords    Int      @map("failed_records")
  errors           String[] // Array of error messages
  userId           String   @map("user_id")
  summary          Json?    // Summary of what was created/updated
  createdAt        DateTime @default(now()) @map("created_at")
  completedAt      DateTime? @map("completed_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("bulk_import_records")
}

// POS System Models

model Customer {
  id               String   @id @default(uuid())
  customerNumber   String   @unique @map("customer_number")
  name             String
  email            String?  @unique
  phone            String?
  address          String?
  city            String?
  postalCode        String?  @map("postal_code")
  loyaltyPoints    Int      @default(0) @map("loyalty_points")
  totalPurchases   Decimal  @default(0) @map("total_purchases") @db.Decimal(10, 2)
  balance          Decimal  @default(0) @db.Decimal(10, 2)  // Customer balance (positive = owes money, negative = credit)
  lastPurchaseDate DateTime? @map("last_purchase_date")
  notes            String?
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  sales Sale[]

  @@map("customers")
}

model Sale {
  id                String        @id @default(uuid())
  saleNumber        String        @unique @map("sale_number")
  customerId        String?       @map("customer_id")
  locationId        String        @map("location_id")
  saleType          SaleType      @map("sale_type")
  saleDate          DateTime      @default(now()) @map("sale_date")
  subtotal          Decimal       @db.Decimal(10, 2)
  taxRate           Decimal       @default(0) @map("tax_rate") @db.Decimal(5, 2)
  taxAmount         Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  discountType      DiscountType? @map("discount_type")
  discountRate      Decimal?      @map("discount_rate") @db.Decimal(5, 2)
  discountAmount    Decimal       @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount       Decimal       @map("total_amount") @db.Decimal(10, 2)
  amountPaid        Decimal       @default(0) @map("amount_paid") @db.Decimal(10, 2)
  changeGiven       Decimal       @default(0) @map("change_given") @db.Decimal(10, 2)
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  status            SaleStatus    @default(DRAFT)
  createdBy         String        @map("created_by")
  completedAt       DateTime?     @map("completed_at")
  cancelledAt       DateTime?     @map("cancelled_at")
  cancelledBy       String?       @map("cancelled_by")
  cancellationReason String?      @map("cancellation_reason")
  notes             String?
  customerNotes     String?       @map("customer_notes")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  customer         Customer?      @relation(fields: [customerId], references: [id])
  location         Location       @relation(fields: [locationId], references: [id])
  creator          User           @relation("SaleCreator", fields: [createdBy], references: [id])
  canceller        User?          @relation("SaleCanceller", fields: [cancelledBy], references: [id])
  saleItems        SaleItem[]
  payments         Payment[]
  customerPayments CustomerPayment[]
  receipts         Receipt[]
  stockTransactions StockTransaction[]
  refunds          SaleRefund[]   @relation("OriginalSale")

  @@map("sales")
}

model SaleItem {
  id                String        @id @default(uuid())
  saleId            String        @map("sale_id")
  productId         String?       @map("product_id")
  itemType          ItemType      @map("item_type")
  itemName          String        @map("item_name")
  itemDescription   String?        @map("item_description")
  sku               String?
  barcode           String?
  quantity          Decimal       @db.Decimal(10, 3)
  unitPrice         Decimal       @map("unit_price") @db.Decimal(10, 2)
  costPrice         Decimal?      @map("cost_price") @db.Decimal(10, 2)
  lineSubtotal      Decimal       @map("line_subtotal") @db.Decimal(10, 2)
  itemTaxRate       Decimal       @default(0) @map("item_tax_rate") @db.Decimal(5, 2)
  itemTaxAmount     Decimal       @default(0) @map("item_tax_amount") @db.Decimal(10, 2)
  itemDiscountType  DiscountType? @map("item_discount_type")
  itemDiscountRate  Decimal?      @map("item_discount_rate") @db.Decimal(5, 2)
  itemDiscountAmount Decimal      @default(0) @map("item_discount_amount") @db.Decimal(10, 2)
  lineTotal         Decimal       @map("line_total") @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime      @default(now()) @map("created_at")

  // Relations
  sale    Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Payment {
  id              String        @id @default(uuid())
  saleId          String        @map("sale_id")
  paymentMethod   PaymentMethod @map("payment_method")
  amount          Decimal       @db.Decimal(10, 2)
  referenceNumber String?       @map("reference_number")
  cardLastFour    String?       @map("card_last_four")
  cardType        String?       @map("card_type")
  bankName        String?       @map("bank_name")
  chequeNumber    String?       @map("cheque_number")
  paymentDate     DateTime      @default(now()) @map("payment_date")
  processedBy     String        @map("processed_by")
  notes           String?
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  sale      Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
  processor User @relation(fields: [processedBy], references: [id])

  @@map("payments")
}

model Receipt {
  id            String        @id @default(uuid())
  saleId        String        @map("sale_id")
  receiptNumber String        @unique @map("receipt_number")
  receiptType   ReceiptType   @map("receipt_type")
  format        ReceiptFormat
  filePath      String?       @map("file_path")
  emailedTo     String?       @map("emailed_to")
  emailedAt     DateTime?     @map("emailed_at")
  printedAt     DateTime?     @map("printed_at")
  printCount    Int           @default(0) @map("print_count")
  generatedBy   String        @map("generated_by")
  createdAt     DateTime      @default(now()) @map("created_at")

  // Relations
  sale      Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
  generator User  @relation(fields: [generatedBy], references: [id])

  @@map("receipts")
}

model SaleRefund {
  id              String        @id @default(uuid())
  originalSaleId  String        @map("original_sale_id")
  refundNumber    String        @unique @map("refund_number")
  refundType      RefundType    @map("refund_type")
  refundAmount    Decimal       @map("refund_amount") @db.Decimal(10, 2)
  refundMethod    PaymentMethod @map("refund_method")
  reason          String
  processedBy     String        @map("processed_by")
  approvedBy      String        @map("approved_by")
  notes           String?
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  originalSale Sale @relation("OriginalSale", fields: [originalSaleId], references: [id])
  processor    User @relation("RefundProcessor", fields: [processedBy], references: [id])
  approver     User @relation("RefundApprover", fields: [approvedBy], references: [id])

  @@map("sale_refunds")
}

// POS System Enums

enum SaleType {
  RETAIL
  SERVICE
}

enum ItemType {
  PRODUCT
  SERVICE
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_PAYMENT
  BANK_TRANSFER
  CHEQUE
  CREDIT
  OTHER
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
  CANCELLED
}

enum SaleStatus {
  DRAFT
  COMPLETED
  PARTIAL
  CREDIT
  CANCELLED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum ReceiptType {
  ORIGINAL
  DUPLICATE
  REFUND
}

enum ReceiptFormat {
  PDF
  THERMAL
}

enum RefundType {
  FULL
  PARTIAL
}

// Purchase Module Models

model PurchaseOrder {
  id              String           @id @default(uuid())
  orderNumber     String           @unique @map("order_number")
  supplierId      String           @map("supplier_id")
  referenceNo     String?          @map("reference_no")
  orderDate       DateTime         @default(now()) @map("order_date")
  expectedDate    DateTime?        @map("expected_date")
  status          PurchaseStatus   @default(PENDING)
  totalAmount     Decimal          @map("total_amount") @db.Decimal(10, 2)
  amountPaid      Decimal          @default(0) @map("amount_paid") @db.Decimal(10, 2)
  paymentStatus   PaymentStatus    @default(PENDING) @map("payment_status")
  remarks         String?
  createdBy       String           @map("created_by")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  // Relations
  supplier        Supplier         @relation(fields: [supplierId], references: [id])
  items           PurchaseItem[]
  stockTransactions StockTransaction[]
  returns         PurchaseReturn[]
  payments        PurchasePayment[]
  creator         User             @relation("PurchaseCreator", fields: [createdBy], references: [id])

  @@map("purchase_orders")
}

model PurchaseItem {
  id              String        @id @default(uuid())
  purchaseOrderId String        @map("purchase_order_id")
  productId       String        @map("product_id")
  quantity        Float
  costPrice       Decimal       @map("cost_price") @db.Decimal(10, 2)
  retailPrice     Decimal       @map("retail_price") @db.Decimal(10, 2)
  expiryDate      DateTime?     @map("expiry_date")
  totalPrice      Decimal       @map("total_price") @db.Decimal(10, 2)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("purchase_items")
}

model PurchaseReturn {
  id              String        @id @default(uuid())
  returnNumber    String        @unique @map("return_number")
  purchaseOrderId String        @map("purchase_order_id")
  supplierId      String        @map("supplier_id")
  returnDate      DateTime      @default(now()) @map("return_date")
  reason          String
  totalAmount     Decimal       @map("total_amount") @db.Decimal(10, 2)
  status          ReturnStatus  @default(PENDING)
  remarks         String?
  createdBy       String        @map("created_by")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  supplier        Supplier      @relation(fields: [supplierId], references: [id])
  items           PurchaseReturnItem[]
  creator         User          @relation("ReturnCreator", fields: [createdBy], references: [id])

  @@map("purchase_returns")
}

model PurchasePayment {
  id              String        @id @default(uuid())
  purchaseOrderId String        @map("purchase_order_id")
  amount          Decimal       @db.Decimal(10, 2)
  paymentMethod   String        @map("payment_method")
  referenceNumber String?       @map("reference_number")
  paymentDate     DateTime      @default(now()) @map("payment_date")
  notes           String?
  processedBy     String        @map("processed_by")
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  processor       User          @relation("PurchasePaymentProcessor", fields: [processedBy], references: [id])

  @@map("purchase_payments")
}

model CustomerPayment {
  id              String        @id @default(uuid())
  saleId          String        @map("sale_id")
  amount          Decimal       @db.Decimal(10, 2)
  paymentMethod   String        @map("payment_method")
  referenceNumber String?       @map("reference_number")
  paymentDate     DateTime      @default(now()) @map("payment_date")
  notes           String?
  processedBy     String        @map("processed_by")
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  sale      Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
  processor User @relation("CustomerPaymentProcessor", fields: [processedBy], references: [id])

  @@map("customer_payments")
}

model PurchaseReturnItem {
  id              String        @id @default(uuid())
  returnId        String        @map("return_id")
  productId       String        @map("product_id")
  quantity        Float
  costPrice       Decimal       @map("cost_price") @db.Decimal(10, 2)
  totalPrice      Decimal       @map("total_price") @db.Decimal(10, 2)
  reason          String?
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  purchaseReturn  PurchaseReturn @relation(fields: [returnId], references: [id], onDelete: Cascade)
  product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("purchase_return_items")
}

// Purchase Module Enums

enum PurchaseStatus {
  PENDING
  RECEIVED
  PARTIAL
  CANCELLED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}